// Code generated by mockery v2.42.1. DO NOT EDIT.

package dbmock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/babylonchain/staking-expiry-checker/internal/db/model"
)

// DBClient is an autogenerated mock type for the DBClient type
type DBClient struct {
	mock.Mock
}

// FindExpiredDelegations provides a mock function with given fields: ctx, btcTipHeight
func (_m *DBClient) FindExpiredDelegations(ctx context.Context, btcTipHeight uint64) ([]model.StakingExpiryHeightDocument, error) {
	ret := _m.Called(ctx, btcTipHeight)

	if len(ret) == 0 {
		panic("no return value specified for FindExpiredDelegations")
	}

	var r0 []model.StakingExpiryHeightDocument
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) ([]model.StakingExpiryHeightDocument, error)); ok {
		return rf(ctx, btcTipHeight)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) []model.StakingExpiryHeightDocument); ok {
		r0 = rf(ctx, btcTipHeight)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.StakingExpiryHeightDocument)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, btcTipHeight)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ping provides a mock function with given fields: ctx
func (_m *DBClient) Ping(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDBClient creates a new instance of DBClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDBClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *DBClient {
	mock := &DBClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
